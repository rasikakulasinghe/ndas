# Generated by Django 4.1.6 on 2025-08-26 09:58

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import ndas.custom_codes.custom_methods
import ndas.custom_codes.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('patients', '0002_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this record was last updated', verbose_name='Updated At')),
                ('title', models.CharField(help_text='Descriptive title for the video (max 200 characters)', max_length=200, validators=[django.core.validators.RegexValidator(message='Title can only contain letters, numbers, spaces, hyphens, underscores, and dots.', regex='^[a-zA-Z0-9\\s\\-_\\.]+$')], verbose_name='Video Title')),
                ('original_video', models.FileField(help_text='Original uploaded video file', upload_to=ndas.custom_codes.custom_methods.get_video_path_file_name, validators=[ndas.custom_codes.validators.validate_video_file], verbose_name='Original Video File')),
                ('compressed_video', models.FileField(blank=True, help_text='Compressed version of the video for web playback', null=True, upload_to=ndas.custom_codes.custom_methods.get_compressed_video_path, verbose_name='Compressed Video')),
                ('thumbnail', models.ImageField(blank=True, help_text='Auto-generated thumbnail from video', null=True, upload_to=ndas.custom_codes.custom_methods.get_video_thumbnail_path, verbose_name='Video Thumbnail')),
                ('recorded_on', models.DateTimeField(help_text='Date and time when the video was recorded', validators=[ndas.custom_codes.validators.validate_recording_date], verbose_name='Recorded On')),
                ('processing_status', models.CharField(choices=[('pending', 'Pending Upload'), ('uploading', 'Uploading'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', help_text='Current processing status of the video', max_length=20, verbose_name='Processing Status')),
                ('target_quality', models.CharField(choices=[('original', 'Original Quality'), ('high', 'High Quality (1080p)'), ('medium', 'Medium Quality (720p)'), ('low', 'Low Quality (480p)'), ('mobile', 'Mobile Quality (360p)')], default='medium', help_text='Desired compression quality', max_length=20, verbose_name='Target Quality')),
                ('processing_started_at', models.DateTimeField(blank=True, help_text='When video processing began', null=True, verbose_name='Processing Started')),
                ('processing_completed_at', models.DateTimeField(blank=True, help_text='When video processing completed', null=True, verbose_name='Processing Completed')),
                ('processing_error', models.TextField(blank=True, help_text='Error message if processing failed', verbose_name='Processing Error')),
                ('task_id', models.CharField(blank=True, help_text='Celery task ID for video processing', max_length=255, null=True, verbose_name='Celery Task ID')),
                ('retry_count', models.PositiveIntegerField(default=0, help_text='Number of processing retries', verbose_name='Retry Count')),
                ('duration_seconds', models.FloatField(blank=True, help_text='Video duration in seconds', null=True, verbose_name='Duration (seconds)')),
                ('original_resolution', models.CharField(blank=True, help_text='Original video resolution (e.g., 1920x1080)', max_length=20, verbose_name='Original Resolution')),
                ('original_codec', models.CharField(blank=True, help_text='Original video codec', max_length=50, verbose_name='Original Codec')),
                ('original_bitrate', models.PositiveIntegerField(blank=True, help_text='Original video bitrate in kbps', null=True, verbose_name='Original Bitrate')),
                ('file_size', models.PositiveIntegerField(blank=True, help_text='File size in bytes', null=True, verbose_name='File Size')),
                ('format', models.CharField(blank=True, choices=[('mp4', 'MP4'), ('mov', 'MOV/QuickTime'), ('avi', 'AVI'), ('mkv', 'MKV'), ('webm', 'WebM')], help_text='Video file format', max_length=10, verbose_name='Video Format')),
                ('processing_time_seconds', models.FloatField(blank=True, help_text='Time taken to process video in seconds', null=True, verbose_name='Processing Time')),
                ('compression_ratio', models.FloatField(blank=True, help_text='Compression ratio achieved', null=True, verbose_name='Compression Ratio')),
                ('progress_percentage', models.PositiveIntegerField(default=0, help_text='Processing progress percentage', verbose_name='Progress Percentage')),
                ('target_resolution', models.CharField(blank=True, help_text='Target resolution for processing', max_length=20, verbose_name='Target Resolution')),
                ('target_bitrate', models.PositiveIntegerField(blank=True, help_text='Target bitrate in kbps', null=True, verbose_name='Target Bitrate')),
                ('processing_metadata', models.JSONField(blank=True, default=dict, help_text='Additional processing metadata and logs', verbose_name='Processing Metadata')),
                ('description', models.TextField(blank=True, help_text='Detailed description of the video content', max_length=2000, verbose_name='Description')),
                ('added_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='video_app_videos_added', to=settings.AUTH_USER_MODEL, verbose_name='Added By')),
                ('last_edit_by', models.ForeignKey(blank=True, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='video_app_videos_last_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last Edited By')),
                ('patient', models.ForeignKey(help_text='Patient associated with this video', on_delete=django.db.models.deletion.CASCADE, related_name='video_files', to='patients.patient', verbose_name='Patient')),
            ],
            options={
                'verbose_name': 'Video',
                'verbose_name_plural': 'Videos',
                'ordering': ['-created_at', '-recorded_on'],
            },
        ),
    ]
