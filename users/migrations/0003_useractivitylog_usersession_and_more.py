# Generated by Django 4.1.6 on 2025-08-20 03:33

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0002_fresh_customuser'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login_status', models.CharField(choices=[('success', 'Login Success'), ('failed', 'Login Failed'), ('logout', 'Logout')], help_text='Status of the login attempt', max_length=20, verbose_name='Login Status')),
                ('attempted_username', models.CharField(blank=True, help_text='Username attempted during login (for failed attempts)', max_length=150, verbose_name='Attempted Username')),
                ('ip_address', models.GenericIPAddressField(help_text='IP address of the user', verbose_name='IP Address')),
                ('user_agent', models.TextField(help_text='Full user agent string', verbose_name='User Agent')),
                ('browser_name', models.CharField(blank=True, help_text='Browser name (Chrome, Firefox, etc.)', max_length=100, verbose_name='Browser Name')),
                ('browser_version', models.CharField(blank=True, help_text='Browser version', max_length=50, verbose_name='Browser Version')),
                ('operating_system', models.CharField(blank=True, help_text='Operating system (Windows, macOS, Linux, etc.)', max_length=100, verbose_name='Operating System')),
                ('device_type', models.CharField(blank=True, help_text='Device type (Desktop, Mobile, Tablet)', max_length=50, verbose_name='Device Type')),
                ('device_brand', models.CharField(blank=True, help_text='Device brand (Apple, Samsung, etc.)', max_length=100, verbose_name='Device Brand')),
                ('device_model', models.CharField(blank=True, help_text='Device model', max_length=100, verbose_name='Device Model')),
                ('is_mobile', models.BooleanField(default=False, help_text='Whether the device is mobile', verbose_name='Is Mobile')),
                ('is_tablet', models.BooleanField(default=False, help_text='Whether the device is a tablet', verbose_name='Is Tablet')),
                ('is_touch_capable', models.BooleanField(default=False, help_text='Whether the device supports touch', verbose_name='Is Touch Capable')),
                ('is_pc', models.BooleanField(default=False, help_text='Whether the device is a PC', verbose_name='Is PC')),
                ('is_bot', models.BooleanField(default=False, help_text='Whether the user agent is a bot', verbose_name='Is Bot')),
                ('country', models.CharField(blank=True, help_text='Country based on IP address', max_length=100, verbose_name='Country')),
                ('city', models.CharField(blank=True, help_text='City based on IP address', max_length=100, verbose_name='City')),
                ('latitude', models.FloatField(blank=True, help_text='Latitude coordinates', null=True, verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, help_text='Longitude coordinates', null=True, verbose_name='Longitude')),
                ('session_key', models.CharField(blank=True, help_text='Django session key', max_length=40, verbose_name='Session Key')),
                ('login_timestamp', models.DateTimeField(auto_now_add=True, help_text='When the login attempt occurred', verbose_name='Login Timestamp')),
                ('logout_timestamp', models.DateTimeField(blank=True, help_text='When the user logged out', null=True, verbose_name='Logout Timestamp')),
                ('session_duration', models.DurationField(blank=True, help_text='Duration of the session', null=True, verbose_name='Session Duration')),
                ('failed_login_reason', models.CharField(blank=True, help_text='Reason for failed login', max_length=200, verbose_name='Failed Login Reason')),
                ('data_retention_date', models.DateTimeField(blank=True, help_text='Date when this record should be deleted for privacy compliance', null=True, verbose_name='Data Retention Date')),
            ],
            options={
                'verbose_name': 'User Activity Log',
                'verbose_name_plural': 'User Activity Logs',
                'ordering': ['-login_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(help_text='Django session key', max_length=40, unique=True, verbose_name='Session Key')),
                ('ip_address', models.GenericIPAddressField(help_text='IP address of the session', verbose_name='IP Address')),
                ('user_agent', models.TextField(help_text='User agent string', verbose_name='User Agent')),
                ('device_summary', models.CharField(help_text='Summary of device information', max_length=200, verbose_name='Device Summary')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the session was created', verbose_name='Created At')),
                ('last_activity', models.DateTimeField(auto_now=True, help_text='Last activity timestamp', verbose_name='Last Activity')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the session is currently active', verbose_name='Is Active')),
            ],
            options={
                'verbose_name': 'User Session',
                'verbose_name_plural': 'User Sessions',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='email_verification_sent_at',
            field=models.DateTimeField(blank=True, help_text='When the email verification was sent', null=True, verbose_name='Email Verification Sent At'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='email_verification_token',
            field=models.CharField(blank=True, help_text='Token for email verification', max_length=64, verbose_name='Email Verification Token'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='email_verified_at',
            field=models.DateTimeField(blank=True, help_text='When the email was verified', null=True, verbose_name='Email Verified At'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='is_email_verified',
            field=models.BooleanField(default=False, help_text="Whether the user's email has been verified", verbose_name='Email Verified'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['email_verification_token'], name='users_custo_email_v_572f7b_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['is_email_verified'], name='users_custo_is_emai_462fb1_idx'),
        ),
        migrations.AddField(
            model_name='usersession',
            name='user',
            field=models.ForeignKey(help_text='User associated with this session', on_delete=django.db.models.deletion.CASCADE, related_name='active_sessions', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='useractivitylog',
            name='user',
            field=models.ForeignKey(blank=True, help_text='User associated with this activity', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activity_logs', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['user', '-last_activity'], name='users_users_user_id_f9f20a_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['session_key'], name='users_users_session_70af4d_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['is_active', '-last_activity'], name='users_users_is_acti_493f02_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivitylog',
            index=models.Index(fields=['user', '-login_timestamp'], name='users_usera_user_id_0ed29a_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivitylog',
            index=models.Index(fields=['ip_address', '-login_timestamp'], name='users_usera_ip_addr_1e9346_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivitylog',
            index=models.Index(fields=['login_status', '-login_timestamp'], name='users_usera_login_s_f6a38b_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivitylog',
            index=models.Index(fields=['attempted_username', '-login_timestamp'], name='users_usera_attempt_bb08fc_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivitylog',
            index=models.Index(fields=['data_retention_date'], name='users_usera_data_re_ef054e_idx'),
        ),
    ]
