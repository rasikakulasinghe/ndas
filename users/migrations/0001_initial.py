# Generated by Django 4.1.6 on 2025-08-24 17:13

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import ndas.custom_codes.validators


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this record was created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this record was last updated",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "position",
                    models.CharField(
                        choices=[
                            ("Medical Officer", "Medical Officer"),
                            ("Consultant", "Consultant"),
                            ("Registrar", "Registrar"),
                            ("Physiotherapist", "Physiotherapist"),
                            ("Occupational Therapist", "Occupational Therapist"),
                            ("Administrator", "Administrator"),
                            ("Nursing officer", "Nursing officer"),
                            ("Senior Registrar", "Senior Registrar"),
                        ],
                        default="Medical Officer",
                        help_text="User's professional position",
                        max_length=30,
                        verbose_name="Position",
                    ),
                ),
                (
                    "mobile_primary",
                    models.CharField(
                        help_text="Primary mobile number (required)",
                        max_length=15,
                        validators=[ndas.custom_codes.validators.validate_phone_number],
                        verbose_name="Primary Mobile",
                    ),
                ),
                (
                    "mobile_secondary",
                    models.CharField(
                        blank=True,
                        help_text="Secondary mobile number (optional)",
                        max_length=15,
                        validators=[ndas.custom_codes.validators.validate_phone_number],
                        verbose_name="Secondary Mobile",
                    ),
                ),
                (
                    "landline_primary",
                    models.CharField(
                        blank=True,
                        help_text="Primary landline number",
                        max_length=15,
                        validators=[ndas.custom_codes.validators.validate_phone_number],
                        verbose_name="Primary Landline",
                    ),
                ),
                (
                    "landline_secondary",
                    models.CharField(
                        blank=True,
                        help_text="Secondary landline number",
                        max_length=15,
                        validators=[ndas.custom_codes.validators.validate_phone_number],
                        verbose_name="Secondary Landline",
                    ),
                ),
                (
                    "home_address",
                    models.TextField(
                        blank=True,
                        help_text="Home address",
                        verbose_name="Home Address",
                    ),
                ),
                (
                    "station_address",
                    models.TextField(
                        blank=True,
                        help_text="Work station address",
                        verbose_name="Station Address",
                    ),
                ),
                (
                    "last_login_device",
                    models.CharField(
                        blank=True,
                        help_text="Last device used for login",
                        max_length=255,
                        verbose_name="Last Login Device",
                    ),
                ),
                (
                    "is_email_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the user's email has been verified",
                        verbose_name="Email Verified",
                    ),
                ),
                (
                    "email_verification_token",
                    models.CharField(
                        blank=True,
                        help_text="Token for email verification",
                        max_length=64,
                        verbose_name="Email Verification Token",
                    ),
                ),
                (
                    "email_verification_sent_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the email verification was sent",
                        null=True,
                        verbose_name="Email Verification Sent At",
                    ),
                ),
                (
                    "email_verified_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the email was verified",
                        null=True,
                        verbose_name="Email Verified At",
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True,
                        help_text="Profile picture (JPG, JPEG, PNG only)",
                        upload_to="profile_pictures/%Y/%m/",
                        validators=[
                            ndas.custom_codes.validators.image_extension_validation
                        ],
                        verbose_name="Profile Picture",
                    ),
                ),
                (
                    "additional_notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes or information",
                        verbose_name="Additional Notes",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "ordering": ["first_name", "last_name"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this record was created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this record was last updated",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "session_key",
                    models.CharField(
                        default="",
                        help_text="Django session key",
                        max_length=40,
                        unique=True,
                        verbose_name="Session Key",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        help_text="IP address of the session", verbose_name="IP Address"
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        help_text="User agent string", verbose_name="User Agent"
                    ),
                ),
                (
                    "device_summary",
                    models.CharField(
                        help_text="Summary of device information",
                        max_length=200,
                        verbose_name="Device Summary",
                    ),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Last activity timestamp",
                        verbose_name="Last Activity",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the session is currently active",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "added_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_added",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Added By",
                    ),
                ),
                (
                    "last_edit_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last modified this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_last_edited",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Edited By",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User associated with this session",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="active_sessions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Session",
                "verbose_name_plural": "User Sessions",
                "ordering": ["-last_activity"],
            },
        ),
        migrations.CreateModel(
            name="UserActivityLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this record was created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this record was last updated",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "login_status",
                    models.CharField(
                        choices=[
                            ("success", "Login Success"),
                            ("failed", "Login Failed"),
                            ("logout", "Logout"),
                        ],
                        help_text="Status of the login attempt",
                        max_length=20,
                        verbose_name="Login Status",
                    ),
                ),
                (
                    "attempted_username",
                    models.CharField(
                        blank=True,
                        help_text="Username attempted during login (for failed attempts)",
                        max_length=150,
                        verbose_name="Attempted Username",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        help_text="IP address of the user", verbose_name="IP Address"
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True,
                        help_text="Full user agent string",
                        verbose_name="User Agent",
                    ),
                ),
                (
                    "browser_name",
                    models.CharField(
                        blank=True,
                        default="Unknown",
                        help_text="Browser name (Chrome, Firefox, etc.)",
                        max_length=100,
                        verbose_name="Browser Name",
                    ),
                ),
                (
                    "browser_version",
                    models.CharField(
                        blank=True,
                        default="Unknown",
                        help_text="Browser version",
                        max_length=50,
                        verbose_name="Browser Version",
                    ),
                ),
                (
                    "operating_system",
                    models.CharField(
                        blank=True,
                        default="Unknown",
                        help_text="Operating system (Windows, macOS, Linux, etc.)",
                        max_length=100,
                        verbose_name="Operating System",
                    ),
                ),
                (
                    "device_type",
                    models.CharField(
                        blank=True,
                        default="Unknown",
                        help_text="Device type (Desktop, Mobile, Tablet)",
                        max_length=50,
                        verbose_name="Device Type",
                    ),
                ),
                (
                    "device_brand",
                    models.CharField(
                        blank=True,
                        default="Unknown",
                        help_text="Device brand (Apple, Samsung, etc.)",
                        max_length=100,
                        verbose_name="Device Brand",
                    ),
                ),
                (
                    "device_model",
                    models.CharField(
                        blank=True,
                        default="Unknown",
                        help_text="Device model",
                        max_length=100,
                        verbose_name="Device Model",
                    ),
                ),
                (
                    "is_mobile",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the device is mobile",
                        verbose_name="Is Mobile",
                    ),
                ),
                (
                    "is_tablet",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the device is a tablet",
                        verbose_name="Is Tablet",
                    ),
                ),
                (
                    "is_touch_capable",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the device supports touch",
                        verbose_name="Is Touch Capable",
                    ),
                ),
                (
                    "is_pc",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the device is a PC",
                        verbose_name="Is PC",
                    ),
                ),
                (
                    "is_bot",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the user agent is a bot",
                        verbose_name="Is Bot",
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True,
                        help_text="Country based on IP address",
                        max_length=100,
                        verbose_name="Country",
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True,
                        help_text="City based on IP address",
                        max_length=100,
                        verbose_name="City",
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        blank=True,
                        help_text="Latitude coordinates",
                        null=True,
                        verbose_name="Latitude",
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        blank=True,
                        help_text="Longitude coordinates",
                        null=True,
                        verbose_name="Longitude",
                    ),
                ),
                (
                    "session_key",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Django session key",
                        max_length=40,
                        verbose_name="Session Key",
                    ),
                ),
                (
                    "login_timestamp",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the login attempt occurred",
                        verbose_name="Login Timestamp",
                    ),
                ),
                (
                    "logout_timestamp",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the user logged out",
                        null=True,
                        verbose_name="Logout Timestamp",
                    ),
                ),
                (
                    "session_duration",
                    models.DurationField(
                        blank=True,
                        help_text="Duration of the session",
                        null=True,
                        verbose_name="Session Duration",
                    ),
                ),
                (
                    "failed_login_reason",
                    models.CharField(
                        blank=True,
                        help_text="Reason for failed login",
                        max_length=200,
                        verbose_name="Failed Login Reason",
                    ),
                ),
                (
                    "data_retention_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date when this record should be deleted for privacy compliance",
                        null=True,
                        verbose_name="Data Retention Date",
                    ),
                ),
                (
                    "added_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_added",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Added By",
                    ),
                ),
                (
                    "last_edit_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last modified this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_last_edited",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Edited By",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User associated with this activity",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activity_logs",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Activity Log",
                "verbose_name_plural": "User Activity Logs",
                "ordering": ["-login_timestamp"],
            },
        ),
        migrations.CreateModel(
            name="DeveloperContacts",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this record was created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this record was last updated",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        default="Dr. Rasika Kulasinghe",
                        help_text="Developer's full name",
                        max_length=100,
                        verbose_name="Name",
                    ),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        help_text="Developer's logo or photo",
                        upload_to="developer_logos/%Y/%m/",
                        validators=[
                            ndas.custom_codes.validators.image_extension_validation
                        ],
                        verbose_name="Logo/Photo",
                    ),
                ),
                (
                    "qualifications",
                    models.CharField(
                        default="MBBS, HDIT, BIT",
                        help_text="Professional qualifications",
                        max_length=500,
                        verbose_name="Qualifications",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        default="rasikakulasinghe@gmail.com",
                        help_text="Contact email address",
                        max_length=45,
                        verbose_name="Email",
                    ),
                ),
                (
                    "mobile_phone",
                    models.CharField(
                        blank=True,
                        help_text="Mobile phone number",
                        max_length=15,
                        validators=[ndas.custom_codes.validators.validate_phone_number],
                        verbose_name="Mobile Phone",
                    ),
                ),
                (
                    "landline_phone",
                    models.CharField(
                        blank=True,
                        help_text="Landline phone number",
                        max_length=15,
                        validators=[ndas.custom_codes.validators.validate_phone_number],
                        verbose_name="Landline Phone",
                    ),
                ),
                (
                    "facebook_url",
                    models.URLField(
                        blank=True,
                        help_text="Facebook profile URL",
                        verbose_name="Facebook",
                    ),
                ),
                (
                    "twitter_url",
                    models.URLField(
                        blank=True,
                        help_text="Twitter profile URL",
                        verbose_name="Twitter",
                    ),
                ),
                (
                    "whatsapp_number",
                    models.CharField(
                        blank=True,
                        help_text="WhatsApp number",
                        max_length=15,
                        validators=[ndas.custom_codes.validators.validate_phone_number],
                        verbose_name="WhatsApp",
                    ),
                ),
                (
                    "youtube_url",
                    models.URLField(
                        blank=True,
                        help_text="YouTube channel URL",
                        verbose_name="YouTube",
                    ),
                ),
                (
                    "website_url",
                    models.URLField(
                        blank=True,
                        help_text="Personal or professional website URL",
                        verbose_name="Website",
                    ),
                ),
                (
                    "added_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_added",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Added By",
                    ),
                ),
                (
                    "last_edit_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last modified this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_last_edited",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Edited By",
                    ),
                ),
            ],
            options={
                "verbose_name": "Developer Contact",
                "verbose_name_plural": "Developer Contacts",
                "ordering": ["name"],
            },
        ),
        migrations.AddIndex(
            model_name="usersession",
            index=models.Index(
                fields=["user", "-last_activity"], name="users_users_user_id_f9f20a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usersession",
            index=models.Index(
                fields=["session_key"], name="users_users_session_70af4d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usersession",
            index=models.Index(
                fields=["is_active", "-last_activity"],
                name="users_users_is_acti_493f02_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="useractivitylog",
            index=models.Index(
                fields=["user", "-login_timestamp"],
                name="users_usera_user_id_0ed29a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="useractivitylog",
            index=models.Index(
                fields=["ip_address", "-login_timestamp"],
                name="users_usera_ip_addr_1e9346_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="useractivitylog",
            index=models.Index(
                fields=["login_status", "-login_timestamp"],
                name="users_usera_login_s_f6a38b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="useractivitylog",
            index=models.Index(
                fields=["attempted_username", "-login_timestamp"],
                name="users_usera_attempt_bb08fc_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="useractivitylog",
            index=models.Index(
                fields=["data_retention_date"], name="users_usera_data_re_ef054e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(
                fields=["position"], name="users_custo_positio_e363bb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(
                fields=["created_at"], name="users_custo_created_f4b145_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(
                fields=["email_verification_token"],
                name="users_custo_email_v_572f7b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(
                fields=["is_email_verified"], name="users_custo_is_emai_462fb1_idx"
            ),
        ),
    ]
