# Generated by Django 4.1.6 on 2025-08-22 09:09

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import djrichtextfield.models
import ndas.custom_codes.custom_methods
import ndas.custom_codes.validators


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="DiagnosisList",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("abr", models.CharField(max_length=6)),
                ("title", models.TextField()),
                ("description", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="Help",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                (
                    "description",
                    djrichtextfield.models.RichTextField(blank=True, null=True),
                ),
                (
                    "video_1",
                    models.FileField(blank=True, null=True, upload_to="tutorials/"),
                ),
                (
                    "video_2",
                    models.FileField(blank=True, null=True, upload_to="tutorials/"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="IndicationsForGMA",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=75)),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("High", "High"),
                            ("Medium", "Medium"),
                            ("Low", "Low"),
                        ],
                        max_length=6,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("last_edit_on", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="gmai_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "last_edit_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="gmai_last_edit_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Patient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this record was created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this record was last updated",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "bht",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Bed Head Ticket number - unique hospital identifier",
                        max_length=20,
                        null=True,
                        unique=True,
                        verbose_name="BHT Number",
                    ),
                ),
                (
                    "nnc_no",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="National Neonatal Care number",
                        max_length=20,
                        null=True,
                        unique=True,
                        verbose_name="NNC Number",
                    ),
                ),
                (
                    "ptc_no",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Perinatal Transport Card number",
                        max_length=20,
                        null=True,
                        unique=True,
                        verbose_name="PTC Number",
                    ),
                ),
                (
                    "pc_no",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Patient Card number",
                        max_length=20,
                        null=True,
                        unique=True,
                        verbose_name="PC Number",
                    ),
                ),
                (
                    "pin",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Patient Identification Number",
                        max_length=20,
                        null=True,
                        unique=True,
                        verbose_name="PIN",
                    ),
                ),
                (
                    "disk_no",
                    models.CharField(
                        blank=True,
                        help_text="Physical disk/file number for record storage",
                        max_length=20,
                        null=True,
                        verbose_name="Disk Number",
                    ),
                ),
                (
                    "baby_name",
                    models.CharField(
                        db_index=True,
                        help_text="Full name of the infant",
                        max_length=100,
                        verbose_name="Baby's Name",
                    ),
                ),
                (
                    "mother_name",
                    models.CharField(
                        db_index=True,
                        help_text="Full name of the mother",
                        max_length=100,
                        verbose_name="Mother's Name",
                    ),
                ),
                (
                    "pog_wks",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (20, "20"),
                            (21, "21"),
                            (22, "22"),
                            (23, "23"),
                            (24, "24"),
                            (25, "25"),
                            (26, "26"),
                            (27, "27"),
                            (28, "28"),
                            (29, "29"),
                            (30, "30"),
                            (31, "31"),
                            (32, "32"),
                            (33, "33"),
                            (34, "34"),
                            (35, "35"),
                            (36, "36"),
                            (37, "37"),
                            (38, "38"),
                            (39, "39"),
                            (40, "40"),
                            (41, "41"),
                            (42, "42"),
                        ],
                        default=40,
                        help_text="Gestational age in completed weeks (20-44)",
                        validators=[ndas.custom_codes.validators.validate_pog_weeks],
                        verbose_name="Period of Gestation (Weeks)",
                    ),
                ),
                (
                    "pog_days",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "0"),
                            (1, "1"),
                            (2, "2"),
                            (3, "3"),
                            (4, "4"),
                            (5, "5"),
                            (6, "6"),
                        ],
                        default=0,
                        help_text="Additional days beyond completed weeks (0-6)",
                        validators=[ndas.custom_codes.validators.validate_pog_days],
                        verbose_name="Period of Gestation (Days)",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("Male", "Male"),
                            ("Female", "Female"),
                            ("Undefine", "Undefine"),
                        ],
                        db_index=True,
                        help_text="Biological sex of the infant",
                        max_length=8,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "dob_tob",
                    models.DateTimeField(
                        db_index=True,
                        help_text="Exact date and time when the baby was born",
                        verbose_name="Date and Time of Birth",
                    ),
                ),
                (
                    "mo_delivery",
                    models.CharField(
                        choices=[
                            (
                                "Normal vaginal delivery (NVD)",
                                "Normal vaginal delivery (NVD)",
                            ),
                            (
                                "Assisted vaginal delivery (AVD)",
                                "Assisted vaginal delivery (AVD)",
                            ),
                            ("Forcep delivery", "Forcep delivery"),
                            ("Vacume delivery", "Vacume delivery"),
                            ("Emergency LSCS", "Emergency LSCS"),
                            ("Elective LSCS", "Elective LSCS"),
                            ("VBAC", "Vaginal birth after CS (VBAC)"),
                            ("Home delivery", "Home delivery"),
                            ("Other", "Other"),
                        ],
                        default="NVD",
                        help_text="Method by which the baby was delivered",
                        max_length=35,
                        verbose_name="Mode of Delivery",
                    ),
                ),
                (
                    "apgar_1",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "0"),
                            (1, "1"),
                            (2, "2"),
                            (3, "3"),
                            (4, "4"),
                            (5, "5"),
                            (6, "6"),
                            (7, "7"),
                            (8, "8"),
                            (9, "9"),
                            (10, "10"),
                        ],
                        default=10,
                        help_text="APGAR score assessed at 1 minute after birth (0-10)",
                        validators=[ndas.custom_codes.validators.validate_apgar_score],
                        verbose_name="APGAR Score at 1 minute",
                    ),
                ),
                (
                    "apgar_5",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "0"),
                            (1, "1"),
                            (2, "2"),
                            (3, "3"),
                            (4, "4"),
                            (5, "5"),
                            (6, "6"),
                            (7, "7"),
                            (8, "8"),
                            (9, "9"),
                            (10, "10"),
                        ],
                        default=10,
                        help_text="APGAR score assessed at 5 minutes after birth (0-10)",
                        validators=[ndas.custom_codes.validators.validate_apgar_score],
                        verbose_name="APGAR Score at 5 minutes",
                    ),
                ),
                (
                    "apgar_10",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "0"),
                            (1, "1"),
                            (2, "2"),
                            (3, "3"),
                            (4, "4"),
                            (5, "5"),
                            (6, "6"),
                            (7, "7"),
                            (8, "8"),
                            (9, "9"),
                            (10, "10"),
                        ],
                        default=10,
                        help_text="APGAR score assessed at 10 minutes after birth (0-10)",
                        validators=[ndas.custom_codes.validators.validate_apgar_score],
                        verbose_name="APGAR Score at 10 minutes",
                    ),
                ),
                (
                    "resuscitated",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether the baby required resuscitation at birth",
                        verbose_name="Required Resuscitation",
                    ),
                ),
                (
                    "resustn_note",
                    models.TextField(
                        blank=True,
                        help_text="Detailed notes about resuscitation procedures performed",
                        null=True,
                        verbose_name="Resuscitation Notes",
                    ),
                ),
                (
                    "birth_weight",
                    models.PositiveSmallIntegerField(
                        help_text="Weight of the baby at birth in grams (300-8000g)",
                        validators=[ndas.custom_codes.validators.validate_birth_weight],
                        verbose_name="Birth Weight (grams)",
                    ),
                ),
                (
                    "length",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Length of the baby at birth in centimeters",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(20),
                            django.core.validators.MaxValueValidator(70),
                        ],
                        verbose_name="Length (cm)",
                    ),
                ),
                (
                    "ofc",
                    models.PositiveSmallIntegerField(
                        help_text="Head circumference measurement in centimeters",
                        validators=[
                            django.core.validators.MinValueValidator(20),
                            django.core.validators.MaxValueValidator(50),
                        ],
                        verbose_name="Occipital Frontal Circumference (cm)",
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True,
                        help_text="Complete residential address",
                        null=True,
                        verbose_name="Address",
                    ),
                ),
                (
                    "tp_mobile",
                    models.CharField(
                        help_text="Primary contact mobile number",
                        max_length=15,
                        validators=[ndas.custom_codes.validators.validate_phone_number],
                        verbose_name="Primary Mobile Number",
                    ),
                ),
                (
                    "tp_lan",
                    models.CharField(
                        blank=True,
                        help_text="Landline/secondary contact number",
                        max_length=15,
                        null=True,
                        validators=[ndas.custom_codes.validators.validate_phone_number],
                        verbose_name="Landline Number",
                    ),
                ),
                (
                    "moh_area",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Medical Officer of Health administrative area",
                        max_length=255,
                        null=True,
                        verbose_name="MOH Area",
                    ),
                ),
                (
                    "phm_area",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Public Health Midwife coverage area",
                        max_length=255,
                        null=True,
                        verbose_name="PHM Area",
                    ),
                ),
                (
                    "problems",
                    models.TextField(
                        blank=True,
                        help_text="Current medical problems or concerns",
                        null=True,
                        verbose_name="Medical Problems",
                    ),
                ),
                (
                    "antenatal_hx",
                    models.TextField(
                        blank=True,
                        help_text="Medical history during pregnancy",
                        null=True,
                        verbose_name="Antenatal History",
                    ),
                ),
                (
                    "intranatal_hx",
                    models.TextField(
                        blank=True,
                        help_text="Medical events during labor and delivery",
                        null=True,
                        verbose_name="Intranatal History",
                    ),
                ),
                (
                    "postnatal_hx",
                    models.TextField(
                        blank=True,
                        help_text="Medical events and care after birth",
                        null=True,
                        verbose_name="Postnatal History",
                    ),
                ),
                (
                    "do_admission",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="When the patient was admitted to the facility",
                        null=True,
                        verbose_name="Date of Admission",
                    ),
                ),
                (
                    "do_discharge",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="When the patient was discharged from the facility",
                        null=True,
                        verbose_name="Date of Discharge",
                    ),
                ),
                (
                    "other_relavent_details",
                    models.TextField(
                        blank=True,
                        help_text="Any additional medical or social information",
                        null=True,
                        verbose_name="Other Relevant Details",
                    ),
                ),
                (
                    "added_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_added",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Added By",
                    ),
                ),
                (
                    "indecation_for_gma",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Medical indications for General Movement Assessment",
                        to="patients.indicationsforgma",
                        verbose_name="Indications for GMA",
                    ),
                ),
                (
                    "last_edit_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last modified this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_last_edited",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Edited By",
                    ),
                ),
            ],
            options={
                "verbose_name": "Patient",
                "verbose_name_plural": "Patients",
                "ordering": ["-created_at", "baby_name"],
            },
        ),
        migrations.CreateModel(
            name="Video",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this record was created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this record was last updated",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Descriptive title for the video (max 200 characters)",
                        max_length=200,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Title can only contain letters, numbers, spaces, hyphens, underscores, and dots.",
                                regex="^[a-zA-Z0-9\\s\\-_\\.]+$",
                            )
                        ],
                        verbose_name="Video Title",
                    ),
                ),
                (
                    "original_video",
                    models.FileField(
                        help_text="Original uploaded video file",
                        upload_to=ndas.custom_codes.custom_methods.get_video_path_file_name,
                        validators=[ndas.custom_codes.validators.validate_video_file],
                        verbose_name="Original Video File",
                    ),
                ),
                (
                    "compressed_video",
                    models.FileField(
                        blank=True,
                        help_text="Compressed version of the video for web playback",
                        null=True,
                        upload_to=ndas.custom_codes.custom_methods.get_compressed_video_path,
                        verbose_name="Compressed Video",
                    ),
                ),
                (
                    "thumbnail",
                    models.ImageField(
                        blank=True,
                        help_text="Auto-generated thumbnail from video",
                        null=True,
                        upload_to=ndas.custom_codes.custom_methods.get_video_thumbnail_path,
                        verbose_name="Video Thumbnail",
                    ),
                ),
                (
                    "recorded_on",
                    models.DateTimeField(
                        help_text="Date and time when the video was recorded",
                        validators=[
                            ndas.custom_codes.validators.validate_recording_date
                        ],
                        verbose_name="Recorded On",
                    ),
                ),
                (
                    "duration",
                    models.DurationField(
                        blank=True,
                        help_text="Video duration in seconds (auto-detected)",
                        null=True,
                        verbose_name="Duration",
                    ),
                ),
                (
                    "file_size",
                    models.PositiveBigIntegerField(
                        blank=True,
                        help_text="Original file size in bytes",
                        null=True,
                        verbose_name="File Size",
                    ),
                ),
                (
                    "compressed_file_size",
                    models.PositiveBigIntegerField(
                        blank=True,
                        help_text="Compressed file size in bytes",
                        null=True,
                        verbose_name="Compressed File Size",
                    ),
                ),
                (
                    "format",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("mp4", "MP4"),
                            ("mov", "MOV/QuickTime"),
                            ("avi", "AVI"),
                            ("mkv", "MKV"),
                            ("webm", "WebM"),
                        ],
                        help_text="Original video format",
                        max_length=10,
                        verbose_name="Video Format",
                    ),
                ),
                (
                    "resolution",
                    models.CharField(
                        blank=True,
                        help_text="Video resolution (e.g., 1920x1080)",
                        max_length=20,
                        verbose_name="Resolution",
                    ),
                ),
                (
                    "frame_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Video frame rate in FPS",
                        max_digits=5,
                        null=True,
                        verbose_name="Frame Rate",
                    ),
                ),
                (
                    "bitrate",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Video bitrate in kbps",
                        null=True,
                        verbose_name="Bitrate",
                    ),
                ),
                (
                    "processing_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Upload"),
                            ("uploading", "Uploading"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        help_text="Current processing status of the video",
                        max_length=20,
                        verbose_name="Processing Status",
                    ),
                ),
                (
                    "target_quality",
                    models.CharField(
                        choices=[
                            ("original", "Original Quality"),
                            ("high", "High Quality (1080p)"),
                            ("medium", "Medium Quality (720p)"),
                            ("low", "Low Quality (480p)"),
                            ("mobile", "Mobile Quality (360p)"),
                        ],
                        default="medium",
                        help_text="Desired compression quality",
                        max_length=20,
                        verbose_name="Target Quality",
                    ),
                ),
                (
                    "processing_started_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When video processing began",
                        null=True,
                        verbose_name="Processing Started",
                    ),
                ),
                (
                    "processing_completed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When video processing completed",
                        null=True,
                        verbose_name="Processing Completed",
                    ),
                ),
                (
                    "processing_error",
                    models.TextField(
                        blank=True,
                        help_text="Error message if processing failed",
                        verbose_name="Processing Error",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the video content (max 2000 characters)",
                        max_length=2000,
                        verbose_name="Description",
                    ),
                ),
                (
                    "tags",
                    models.CharField(
                        blank=True,
                        help_text="Comma-separated tags for categorization and search",
                        max_length=500,
                        verbose_name="Tags",
                    ),
                ),
                (
                    "is_sensitive",
                    models.BooleanField(
                        default=False,
                        help_text="Mark if video contains sensitive medical content",
                        verbose_name="Contains Sensitive Content",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Allow public access to this video",
                        verbose_name="Public Access",
                    ),
                ),
                (
                    "access_level",
                    models.CharField(
                        choices=[
                            ("restricted", "Restricted"),
                            ("team", "Team Access"),
                            ("department", "Department Access"),
                            ("public", "Public Access"),
                        ],
                        default="restricted",
                        help_text="Who can access this video",
                        max_length=20,
                        verbose_name="Access Level",
                    ),
                ),
                (
                    "uploaded_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this video was uploaded",
                        verbose_name="Uploaded On",
                    ),
                ),
                (
                    "last_edit_on",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this video was last modified",
                        null=True,
                        verbose_name="Last Edited On",
                    ),
                ),
                (
                    "added_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_added",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Added By",
                    ),
                ),
                (
                    "last_edit_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last modified this video",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="edited_videos",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Edited By",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        help_text="Patient associated with this video",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="videos",
                        to="patients.patient",
                        verbose_name="Patient",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who uploaded this video",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="uploaded_videos",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Uploaded By",
                    ),
                ),
            ],
            options={
                "verbose_name": "Video",
                "verbose_name_plural": "Videos",
                "ordering": ["-uploaded_on", "-recorded_on"],
            },
        ),
        migrations.CreateModel(
            name="HINEAssessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_of_assessment", models.DateTimeField()),
                (
                    "score",
                    models.SmallIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(78),
                        ],
                        verbose_name="HINE Score",
                    ),
                ),
                ("assessment_done_by", models.CharField(max_length=200)),
                ("comment", models.TextField(blank=True, null=True)),
                ("added_on", models.DateTimeField(auto_now_add=True)),
                ("last_edit_on", models.DateTimeField(auto_now=True, null=True)),
                (
                    "added_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hine_added_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "last_edit_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hine_created_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="patients.patient",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GMAssessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this record was created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this record was last updated",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "date_of_assessment",
                    models.DateTimeField(
                        db_index=True,
                        help_text="When this assessment was performed",
                        verbose_name="Date of Assessment",
                    ),
                ),
                (
                    "diagnosis_other",
                    models.TextField(
                        blank=True,
                        help_text="Additional diagnosis notes not covered by standard list",
                        null=True,
                        verbose_name="Other Diagnosis",
                    ),
                ),
                (
                    "diagnosis_conclusion",
                    models.CharField(
                        choices=[("NORMAL", "NORMAL"), ("ABNORMAL", "ABNORMAL")],
                        db_index=True,
                        default="NORMAL",
                        help_text="Overall assessment conclusion",
                        max_length=8,
                        verbose_name="Diagnosis Conclusion",
                    ),
                ),
                (
                    "management_plan",
                    models.TextField(
                        blank=True,
                        help_text="Recommended treatment and intervention plan",
                        null=True,
                        verbose_name="Management Plan",
                    ),
                ),
                (
                    "next_assessment_date",
                    models.DateField(
                        blank=True,
                        db_index=True,
                        help_text="Scheduled date for follow-up assessment",
                        null=True,
                        verbose_name="Next Assessment Date",
                    ),
                ),
                (
                    "parent_informed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the parent has been informed of the results",
                        verbose_name="Parent Informed",
                    ),
                ),
                (
                    "added_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_added",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Added By",
                    ),
                ),
                (
                    "diagnosis",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Selected diagnoses for this assessment",
                        to="patients.diagnosislist",
                        verbose_name="Diagnosis",
                    ),
                ),
                (
                    "last_edit_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last modified this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_last_edited",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Edited By",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        help_text="Patient this assessment belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="patients.patient",
                        verbose_name="Patient",
                    ),
                ),
                (
                    "video_file",
                    models.OneToOneField(
                        help_text="Associated video file for this assessment",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="patients.video",
                        verbose_name="Video File",
                    ),
                ),
            ],
            options={
                "verbose_name": "GM Assessment",
                "verbose_name_plural": "GM Assessments",
                "ordering": ["-date_of_assessment", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DevelopmentalAssessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_of_assessment", models.DateTimeField()),
                ("gm_age_from", models.SmallIntegerField(blank=True, null=True)),
                ("gm_age_to", models.SmallIntegerField(blank=True, null=True)),
                ("gm_details", models.TextField(blank=True, null=True)),
                ("fmv_age_from", models.SmallIntegerField(blank=True, null=True)),
                ("fmv_age_to", models.SmallIntegerField(blank=True, null=True)),
                ("fmv_details", models.TextField(blank=True, null=True)),
                ("hsl_age_from", models.SmallIntegerField(blank=True, null=True)),
                ("hsl_age_to", models.SmallIntegerField(blank=True, null=True)),
                ("hsl_details", models.TextField(blank=True, null=True)),
                ("seb_age_from", models.SmallIntegerField(blank=True, null=True)),
                ("seb_age_to", models.SmallIntegerField(blank=True, null=True)),
                ("seb_details", models.TextField(blank=True, null=True)),
                ("assessment_done_by", models.CharField(max_length=200)),
                ("comment", models.TextField(blank=True, null=True)),
                ("added_on", models.DateTimeField(auto_now_add=True)),
                ("last_edit_on", models.DateTimeField(auto_now=True, null=True)),
                ("isDxNormal", models.BooleanField(default=False)),
                (
                    "added_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="da_added_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "last_edit_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="da_created_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="patients.patient",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CDICRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this record was created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this record was last updated",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "assessment_date",
                    models.DateField(
                        db_index=True,
                        help_text="Date when the assessment was performed",
                        verbose_name="Assessment Date",
                    ),
                ),
                (
                    "assessment",
                    models.TextField(
                        blank=True,
                        help_text="Detailed assessment findings and observations",
                        null=True,
                        verbose_name="Assessment Details",
                    ),
                ),
                (
                    "assessment_done_by",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Name or ID of the healthcare professional who performed the assessment",
                        max_length=200,
                        null=True,
                        verbose_name="Assessment Done By",
                    ),
                ),
                (
                    "today_interventions",
                    models.TextField(
                        blank=True,
                        help_text="Interventions and treatments provided during this visit",
                        null=True,
                        verbose_name="Today's Interventions",
                    ),
                ),
                (
                    "next_appointment_date",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Scheduled date and time for next appointment",
                        null=True,
                        verbose_name="Next Appointment Date",
                    ),
                ),
                (
                    "next_appointment_plan",
                    models.TextField(
                        blank=True,
                        help_text="Planned activities and goals for next appointment",
                        null=True,
                        verbose_name="Next Appointment Plan",
                    ),
                ),
                (
                    "is_discharged",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether the patient has been discharged from CDIC care",
                        verbose_name="Is Discharged",
                    ),
                ),
                (
                    "discharged_by",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Name or ID of the healthcare professional who authorized discharge",
                        max_length=200,
                        null=True,
                        verbose_name="Discharged By",
                    ),
                ),
                (
                    "discharge_date",
                    models.DateField(
                        blank=True,
                        db_index=True,
                        help_text="Date when the patient was discharged from CDIC care",
                        null=True,
                        verbose_name="Discharge Date",
                    ),
                ),
                (
                    "discharge_plan",
                    models.TextField(
                        blank=True,
                        help_text="Discharge planning and follow-up instructions",
                        null=True,
                        verbose_name="Discharge Plan",
                    ),
                ),
                (
                    "added_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_added",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Added By",
                    ),
                ),
                (
                    "last_edit_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last modified this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_last_edited",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Edited By",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        help_text="Patient this CDIC record belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="patients.patient",
                        verbose_name="Patient",
                    ),
                ),
            ],
            options={
                "verbose_name": "CDIC Record",
                "verbose_name_plural": "CDIC Records",
                "ordering": ["-assessment_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Bookmark",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=100)),
                (
                    "bookmark_type",
                    models.CharField(
                        choices=[
                            ("Patient", "Patient"),
                            ("Video", "Video"),
                            ("GMA", "GMA"),
                            ("HINE", "HINE"),
                            ("Attachment", "Attachment"),
                            ("DA", "DA"),
                            ("CDICR", "CDICR"),
                        ],
                        default="Video",
                        max_length=10,
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                ("description", models.TextField(blank=True, null=True)),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("last_edit_on", models.DateTimeField(blank=True, null=True)),
                (
                    "last_edit_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bm_last_edit_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Attachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this record was created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this record was last updated",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        db_index=True,
                        help_text="Descriptive title for the attachment (max 200 characters)",
                        max_length=200,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Title can only contain letters, numbers, spaces, hyphens, underscores, dots, commas, and parentheses.",
                                regex="^[a-zA-Z0-9\\s\\-_\\.(),]+$",
                            )
                        ],
                        verbose_name="Title",
                    ),
                ),
                (
                    "attachment",
                    models.FileField(
                        help_text="Upload file (Images: 10MB max, Videos: 2GB max, Others: 100MB max)",
                        upload_to=ndas.custom_codes.custom_methods.get_attachment_path_file_name,
                        validators=[
                            ndas.custom_codes.validators.validate_attachment_file
                        ],
                        verbose_name="Attachment File",
                    ),
                ),
                (
                    "attachment_type",
                    models.CharField(
                        choices=[
                            ("image", "Image"),
                            ("pdf", "PDF Document"),
                            ("video", "Video File"),
                            ("document", "Document"),
                            ("other", "Other"),
                        ],
                        db_index=True,
                        help_text="Type of file being uploaded",
                        max_length=10,
                        verbose_name="Attachment Type",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the attachment content (max 1000 characters)",
                        max_length=1000,
                        verbose_name="Description",
                    ),
                ),
                (
                    "file_size",
                    models.PositiveBigIntegerField(
                        blank=True,
                        help_text="File size in bytes (auto-detected)",
                        null=True,
                        verbose_name="File Size",
                    ),
                ),
                (
                    "mime_type",
                    models.CharField(
                        blank=True,
                        help_text="File MIME type (auto-detected)",
                        max_length=100,
                        verbose_name="MIME Type",
                    ),
                ),
                (
                    "original_filename",
                    models.CharField(
                        blank=True,
                        help_text="Original name of the uploaded file",
                        max_length=255,
                        verbose_name="Original Filename",
                    ),
                ),
                (
                    "is_sensitive",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Mark if attachment contains sensitive medical information",
                        verbose_name="Contains Sensitive Content",
                    ),
                ),
                (
                    "access_level",
                    models.CharField(
                        choices=[
                            ("restricted", "Restricted Access"),
                            ("team", "Team Access"),
                            ("department", "Department Access"),
                            ("general", "General Access"),
                        ],
                        db_index=True,
                        default="restricted",
                        help_text="Who can access this attachment",
                        max_length=20,
                        verbose_name="Access Level",
                    ),
                ),
                (
                    "is_scanned",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the file has been scanned for viruses",
                        verbose_name="Virus Scanned",
                    ),
                ),
                (
                    "scan_result",
                    models.CharField(
                        choices=[
                            ("pending", "Scan Pending"),
                            ("clean", "Clean"),
                            ("infected", "Infected"),
                            ("error", "Scan Error"),
                        ],
                        default="pending",
                        help_text="Result of virus scan",
                        max_length=20,
                        verbose_name="Scan Result",
                    ),
                ),
                (
                    "uploaded_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="When this attachment was uploaded",
                        verbose_name="Uploaded On",
                    ),
                ),
                (
                    "last_edit_on",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this attachment was last modified",
                        null=True,
                        verbose_name="Last Edited On",
                    ),
                ),
                (
                    "added_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_added",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Added By",
                    ),
                ),
                (
                    "last_edit_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last modified this attachment",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="edited_attachments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Edited By",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        help_text="Patient this attachment belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="patients.patient",
                        verbose_name="Patient",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who uploaded this attachment",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="uploaded_attachments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Uploaded By",
                    ),
                ),
            ],
            options={
                "verbose_name": "Attachment",
                "verbose_name_plural": "Attachments",
                "ordering": ["-uploaded_on", "-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="video",
            index=models.Index(
                fields=["patient", "-uploaded_on"],
                name="patients_vi_patient_199fda_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="video",
            index=models.Index(
                fields=["processing_status"], name="patients_vi_process_2b37a8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="video",
            index=models.Index(
                fields=["uploaded_by", "-uploaded_on"],
                name="patients_vi_uploade_1ef67a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="video",
            index=models.Index(
                fields=["recorded_on"], name="patients_vi_recorde_27cabb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="video",
            index=models.Index(
                fields=["is_public", "access_level"],
                name="patients_vi_is_publ_47b9b4_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="video",
            constraint=models.CheckConstraint(
                check=models.Q(("file_size__gte", 0)), name="positive_file_size"
            ),
        ),
        migrations.AddConstraint(
            model_name="video",
            constraint=models.CheckConstraint(
                check=models.Q(("compressed_file_size__gte", 0)),
                name="positive_compressed_file_size",
            ),
        ),
        migrations.AddIndex(
            model_name="patient",
            index=models.Index(
                fields=["baby_name", "mother_name"], name="patient_names_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="patient",
            index=models.Index(fields=["dob_tob", "gender"], name="patient_birth_idx"),
        ),
        migrations.AddIndex(
            model_name="patient",
            index=models.Index(
                fields=["created_at", "moh_area"], name="patient_location_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="patient",
            index=models.Index(
                fields=["resuscitated", "birth_weight"], name="patient_risk_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="patient",
            constraint=models.CheckConstraint(
                check=models.Q(("birth_weight__gte", 300), ("birth_weight__lte", 8000)),
                name="valid_birth_weight",
            ),
        ),
        migrations.AddConstraint(
            model_name="patient",
            constraint=models.CheckConstraint(
                check=models.Q(("pog_wks__gte", 20), ("pog_wks__lte", 44)),
                name="valid_pog_weeks",
            ),
        ),
        migrations.AddConstraint(
            model_name="patient",
            constraint=models.CheckConstraint(
                check=models.Q(("pog_days__gte", 0), ("pog_days__lte", 6)),
                name="valid_pog_days",
            ),
        ),
        migrations.AddIndex(
            model_name="gmassessment",
            index=models.Index(
                fields=["patient", "date_of_assessment"], name="gma_patient_date_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="gmassessment",
            index=models.Index(
                fields=["diagnosis_conclusion", "date_of_assessment"],
                name="gma_conclusion_date_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="gmassessment",
            index=models.Index(
                fields=["next_assessment_date", "parent_informed"],
                name="gma_followup_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="gmassessment",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "date_of_assessment__lte",
                        datetime.datetime(
                            2025, 8, 22, 9, 9, 8, 13, tzinfo=datetime.timezone.utc
                        ),
                    )
                ),
                name="gma_valid_assessment_date",
            ),
        ),
        migrations.AddConstraint(
            model_name="gmassessment",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("next_assessment_date__gte", models.F("date_of_assessment__date"))
                ),
                name="gma_valid_next_assessment_date",
            ),
        ),
        migrations.AddIndex(
            model_name="cdicrecord",
            index=models.Index(
                fields=["patient", "assessment_date"], name="cdic_patient_date_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cdicrecord",
            index=models.Index(
                fields=["is_discharged", "assessment_date"], name="cdic_discharge_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cdicrecord",
            index=models.Index(
                fields=["next_appointment_date", "is_discharged"],
                name="cdic_followup_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="cdicrecord",
            index=models.Index(
                fields=["assessment_done_by", "assessment_date"],
                name="cdic_assessor_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="cdicrecord",
            constraint=models.CheckConstraint(
                check=models.Q(("assessment_date__lte", datetime.date(2025, 8, 22))),
                name="cdic_valid_assessment_date",
            ),
        ),
        migrations.AddConstraint(
            model_name="cdicrecord",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("next_appointment_date__gte", models.F("assessment_date")),
                    ("next_appointment_date__isnull", True),
                    _connector="OR",
                ),
                name="cdic_valid_next_appointment_date",
            ),
        ),
        migrations.AddConstraint(
            model_name="cdicrecord",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("discharge_date__gte", models.F("assessment_date")),
                    ("discharge_date__isnull", True),
                    _connector="OR",
                ),
                name="cdic_valid_discharge_date",
            ),
        ),
        migrations.AddConstraint(
            model_name="cdicrecord",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("is_discharged", False),
                    models.Q(
                        ("is_discharged", True),
                        ("discharge_date__isnull", False),
                        ("discharged_by__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="cdic_discharge_completeness",
            ),
        ),
        migrations.AddIndex(
            model_name="attachment",
            index=models.Index(
                fields=["patient", "-uploaded_on"], name="attachment_patient_date_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="attachment",
            index=models.Index(
                fields=["attachment_type", "-uploaded_on"],
                name="attachment_type_date_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="attachment",
            index=models.Index(
                fields=["uploaded_by", "-uploaded_on"], name="attachment_user_date_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="attachment",
            index=models.Index(
                fields=["is_sensitive", "access_level"], name="attachment_access_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="attachment",
            index=models.Index(
                fields=["scan_result", "is_scanned"], name="attachment_security_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="attachment",
            constraint=models.CheckConstraint(
                check=models.Q(("file_size__gte", 0)),
                name="attachment_positive_file_size",
            ),
        ),
        migrations.AddConstraint(
            model_name="attachment",
            constraint=models.CheckConstraint(
                check=models.Q(("title__length__gte", 1)),
                name="attachment_title_not_empty",
            ),
        ),
    ]
